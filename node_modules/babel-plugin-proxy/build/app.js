'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

exports.default = function (_ref) {
    var t = _ref.types;

    var proxyNodes = {
        MemberExpression: function MemberExpression(path) {
            if (this.disableGetTrap[this.disableGetTrap.length - 1]) return;

            path.replaceWith(t.callExpression(t.identifier("globalGetInterceptor"), [path.node.object, t.stringLiteral(path.node.property.name)]));
        },
        AssignmentExpression: function AssignmentExpression(path) {
            if (t.isMemberExpression(path.node.left)) {
                if (this.disableSetTrap[this.disableSetTrap.length - 1]) return;

                var memberExpr = path.node.left;
                path.replaceWith(t.callExpression(t.identifier("globalSetInterceptor"), [memberExpr.object, t.stringLiteral(memberExpr.property.name), path.node.right]));
            }
        },

        NewExpression: {
            enter: function enter(path) {
                if (path.node.callee.name == "Proxy") {
                    this.disableGetTrap.push(true);
                    this.disableSetTrap.push(true);
                }
            },
            exit: function exit(path) {
                if (path.node.callee.name == "Proxy") {
                    this.disableGetTrap.pop();
                    this.disableSetTrap.pop();
                }
            }
        },

        CallExpression: {
            enter: function enter(path) {
                traverseNoKeys(path, proxyNodes, { disableGetTrap: this.disableGetTrap, disableSetTrap: this.disableSetTrap }, { callee: true });
                this.disableGetTrap.push(true);
            },
            exit: function exit() {
                this.disableGetTrap.pop();
            }
        }
    };

    return {
        visitor: {
            Program: function Program(path) {
                path.traverse(proxyNodes, { disableGetTrap: [], disableSetTrap: [] });

                attachRuntime(path);
            }
        }
    };
};

var fs = require('fs');
var babylon = require('babylon');
var traverse = require('babel-traverse').default;
var visitors = require('babel-traverse').visitors;

//there is no way to skip certain keys while traversing
function traverseNoKeys(nodePath, visitor, state, skipKeys) {
    visitors.explode(visitor);
    return traverse.node(nodePath.node, visitor, nodePath.scope, state, nodePath, skipKeys);
}

function attachRuntime(programPath) {
    //get and parse runtime - i think that there should be better ways to do this...
    // addHelper is internal thing that's why i didn't use it
    var runtimeSourceCode = fs.readFileSync(require.resolve('./runtime')).toString();
    var runtimeAst = babylon.parse(runtimeSourceCode);

    programPath.unshiftContainer("body", runtimeAst.program.body);
}