{"version":3,"sources":["../src/app.js"],"names":[],"mappings":";;;;;;kBAae,gBAAuB;QAAL,CAAC,QAAR,KAAK;;AAE3B,QAAI,UAAU,GAAG;AACb,wBAAgB,4BAAC,IAAI,EAAE;AACnB,gBAAI,CAAC,WAAW,CACZ,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CACvH,CAAC;SACL;AAED,4BAAoB,gCAAC,IAAI,EAAE;AACvB,gBAAI,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AACtC,oBAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;AAClC,oBAAI,CAAC,WAAW,CACZ,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,sBAAsB,CAAC,EAAE,CACnD,UAAU,CAAC,MAAM,EACjB,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,EACzC,IAAI,CAAC,IAAI,CAAC,KAAK,CAClB,CAAC,CACL,CAAC;aACL;SACJ;KACJ,CAAC;;AAGF,WAAO;AACH,eAAO,EAAE;AACL,mBAAO,mBAAC,IAAI,EAAE;AACV,oBAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;;AAE1B,6BAAa,CAAC,IAAI,CAAC,CAAC;aACvB;SACJ;KACJ,CAAC;CACL;;AA9CD,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;;AAGjC,SAAS,aAAa,CAAC,WAAW,EAAE;;AAEhC,QAAM,iBAAiB,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;AACnF,QAAI,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;;AAGlD,eAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;CACjE","file":"app.js","sourcesContent":["var fs = require('fs');\nvar babylon = require('babylon');\n\n\nfunction attachRuntime(programPath) {\n    //get and parse runtime\n    const runtimeSourceCode = fs.readFileSync(require.resolve('./runtime')).toString();\n    var runtimeAst = babylon.parse(runtimeSourceCode);\n\n\n    programPath.unshiftContainer(\"body\", runtimeAst.program.body);\n}\n\nexport default function({ types: t }) {\n\n    var proxyNodes = {\n        MemberExpression(path) {\n            path.replaceWith(\n                t.callExpression(t.identifier(\"globalGetInterceptor\"), [path.node.object, t.stringLiteral(path.node.property.name)])\n            );\n        },\n\n        AssignmentExpression(path) {\n            if (t.isMemberExpression(path.node.left)) {\n                const memberExpr = path.node.left;\n                path.replaceWith(\n                    t.callExpression(t.identifier(\"globalSetInterceptor\"), [\n                        memberExpr.object,\n                        t.stringLiteral(memberExpr.property.name),\n                        path.node.right\n                    ])\n                );\n            }\n        }\n    };\n\n\n    return {\n        visitor: {\n            Program(path) {\n                path.traverse(proxyNodes);\n\n                attachRuntime(path);\n            }\n        }\n    };\n}\n"]}